/*
    Rotation matrix (inverse rotation: just swap sign in both sine function):
        X:
            1 0      0
            0 cos() -sin()
            0 sin()  cos()

        Y:
             cos() 0 sin()
             0     1 0
            -sin() 0 cos()

        Z:
            cos() -sin() 0
            sin()  cos() 0
            0      0     1

    How to apply rotation: multiply rotation matrix to matrix want to rotate

*/

:root {
    --up-color:     #FFFFFF77;
    --down-color:   #FFFF0077;
    --front-color:  #00FF0077;
    --back-color:   #0000FF77;
    --right-color:  #FF000077;
    --left-color:   #FFA00077;
    --hidden-color: #00000077;
    --face-outline: #000000;
    --face-font-size: calc( var(--cube-size) / 4 );
    --face-font-size: 0px;
}

* {
    padding: 0;
    margin: 0;
    color: #eeeeee;
    font-family: monospace;
    box-sizing: border-box;
}
body {
    background: #121212;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
main {
    width: 100%;
    height: 100vh;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
#cube {
    perspective: 10000px;
    transform-style: preserve-3d;
    /* transform: rotateX(-35deg) rotateY(-45deg); */
    transform: rotateX(-90deg) rotateY(0deg);
    /* animation: rotate 5s infinite; */

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
.cubie {
    width: var(--cube-size);
    height: var(--cube-size);
    transform-style: preserve-3d;
    position: absolute;
    /* transition: transform 0.5s; */
    /* transition-timing-function: ease-in; */

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
@keyframes rotate {
    0%   { transform: translateZ( calc( var(--cube-size) * -1 ) ) rotateX(-35deg) rotateY(-45deg); }
    50%  { transform: translateZ( calc( var(--cube-size) *  1 ) ) rotatex( 360deg ) rotateY( 180deg ); }
    100% { transform: translateZ( calc( var(--cube-size) * -1 ) ) rotateX(-35deg) rotateY(-45deg); }
}
.face {
    position: absolute;
    width: var(--cube-size);
    height: var(--cube-size);
    border: 0.5rem solid var(--face-outline);
    font-size: var(--face-font-size);
    -webkit-text-fill-color: black;
    -webkit-text-stroke: 1px;
    transform-style: preserve-3d;
    transition: all 1s;

    display: flex;
    align-items: center;
    justify-content: center;
}
.U { 
    background: var(--up-color);
    transform: rotateX(90deg) translateZ( calc( var(--cube-size) / 2 ) );
}
.D { 
    background: var(--down-color);
    transform: rotateX(90deg) translateZ( calc( -1 * var(--cube-size) / 2 ) );
}
.R { 
    background: var(--right-color);

    /*  
        1. Default matrix (D): 

            1 0 0 0
            0 1 0 0
            0 0 1 0
            0 0 0 1

        2. Rotate 90 deg in X axis:

            Rotate Y matrix (Y):

                cos(90) 0 sin(90)
                0       1 0
                -sin(90) 0 cos(90)

            Y * D = :

                0 0 1 0 
                0 1 0 0 
                -1 0 0 0 
                0 0 0 1 

        3. Translate {length / 2} px (100px) in X axis:

            0   0 1 0 
            0   1 0 0 
            -1   0 0 0 
            100 0 0 1 

        4. Equivalent to transform: rotateY(90deg) translateZ( calc( var(--cube-size) / 2 ) )
    */
    /* transform: matrix3d( 0,   0, 1, 0, 
                        0,   1, 0, 0, 
                        -1,   0, 0, 0, 
                        100, 0, 0, 1); */
    transform: rotateY(90deg) translateZ( calc( var(--cube-size) / 2 ) );
}
.L { 
    background: var(--left-color);

    /*  
        1. Default matrix (D): 

            1 0 0 0
            0 1 0 0
            0 0 1 0
            0 0 0 1

        2. Rotate 90 deg in X axis:

            Rotate Y inverse matrix (-Y):

                cos(90) 0 -sin(90)
                0       1  0
                sin(90) 0  cos(90)

            -Y * D = :

                0 0 -1 0 
                0 1  0 0 
                1 0  0 0 
                0 0  0 1 

        3. Translate {-length / 2} px (100px) in X axis:

            0   0 -1 0 
            0   1  0 0 
            1   0  0 0 
            -100 0  0 1 

        4. Equivalent to transform: rotateY(90deg) translateZ( calc( -1 * var(--cube-size) / 2 ) )
    */
    /* transform: matrix3d( 0,   0, -1, 0, 
                        0,   1,  0, 0, 
                        1,   0,  0, 0, 
                        -100, 0,  0, 1); */
    transform: rotateY(90deg) translateZ( calc( -1 * var(--cube-size) / 2 ) );
}
.F { 
    background: var(--front-color);

    /*  
        1. Default matrix (D): 

            1 0 0 0
            0 1 0 0
            0 0 1 0
            0 0 0 1

        2. Translate {length / 2} px (100px) in Z axis:

            1 0 0   0
            0 1 0   0
            0 0 1   0
            0 0 100 1

        4. Equivalent to transform: translateZ( calc( var(--cube-size) / 2 ) )
    */
    /* transform: matrix3d(1, 0, 0,   0, 
                        0, 1, 0,   0, 
                        0, 0, 1,   0, 
                        0, 0, 100, 1); */
    transform: translateZ( calc( var(--cube-size) / 2 ) );
}
.B { 
    background: var(--back-color);
    transform: translateZ( calc( -1 * var(--cube-size) / 2 ) )
}

.black {
    background-color: var(--hidden-color);
}

button {
    padding: 1rem;
    border: 0.125rem solid white;
    background: #121212;
}